---
title: "Client Report - Can You Predict That?"
subtitle: "Course DS 250"
author: "[Dallin Slater]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np

from lets_plot import *

url = "https://github.com/byuidatascience/data4dwellings/raw/master/data-raw/dwellings_ml/dwellings_ml.csv"


data = pd.read_csv(url)

display(data)


LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
# import your data here using pandas and the URL


```

## Elevator pitch
_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)

_A Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client._

## QUESTION|TASK 1

__Create 2-3 charts that evaluate potential relationships between the home variables and `before1980`.__ Explain what you learn from the charts that could help a machine learning algorithm. 

_The majority of the housees built before 1980 has a greater difference in the condition_Good compared to houses built after 1980. It can also be inferred that there is a big difference between quality C between house built before nad after 1980 with a smaller yet noticable difference of quality B while the rest of the values are too miniscule to measure and compare.  _

```{python}
# Include and execute your code here
from pandas import melt
from lets_plot import *
LetsPlot.setup_html()

#Combo of variables
data_melted_conditions = melt(data, id_vars=['before1980'], 
                               value_vars=['condition_AVG', 'condition_Excel', 'condition_Fair', 'condition_Good', 'condition_VGood'],
                               var_name='Condition_Type', value_name='Condition_Value')

## bar chart
bar_chart = ggplot(data_melted_conditions, aes(x='before1980', fill='Condition_Type')) + \
    geom_bar(aes(weight='Condition_Value'), position='stack') + \
    ggtitle("Condition / Before 1980") + \
    xlab("Built Before 1980") + \
    ylab("Proportion (0-1)") + \
    theme_minimal()
bar_chart.show() 

# QUALITY 

#Combo of Quality variables
data_melted_quality = melt(data, id_vars=['before1980'], 
                            value_vars=['quality_A', 'quality_B', 'quality_C', 'quality_D', 'quality_X'],
                            var_name='Quality_Type', value_name='Quality_Value')

## bar chart
bar_chart = ggplot(data_melted_quality, aes(x='before1980', fill='Quality_Type')) + \
    geom_bar(aes(weight='Quality_Value'), position='stack') + \
    ggtitle("Quality / Before 1980") + \
    xlab("Built Before 1980") + \
    ylab("Proportion (0-1)") + \
    theme_minimal()
bar_chart.show() 


```


## QUESTION|TASK 2

__Build a classification model labeling houses as being built “before 1980” or “during or after 1980”.__ Your goal is to reach or exceed 90% accuracy. Explain your final model choice (algorithm, tuning parameters, etc) and describe what other models you tried.  

_Used the precision, REcall, and F1 Score/ DecisionTreeClassifier which measure the linear relationship between the features._

```{python}
# Include and execute your code here

# Load libraries
import pandas as pd
from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier
from sklearn.model_selection import train_test_split # Import train_test_split function
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

from sklearn.metrics import accuracy_score, classification_report

# load dataset
columns_to_drop = ['before1980', 'parcel', 'yrbuilt' ]
df_cleaneed = data.drop(columns=[col for col in columns_to_drop if col in data.columns])

#split dataset in features and target variable
X = df_cleaneed # Features
y = data["before1980"]# Target variable

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # 80% training and 30% test

# Create Decision Tree classifer object
clf = DecisionTreeClassifier()

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))


```


## QUESTION|TASK 3

__Justify your classification model by discussing the most important features selected by your model.__ This discussion should include a feature importance chart and a description of the features. 

_Quality_D was the feature with the highest importance in deciding and classifying houses built before 1980. Or at least has the highest accuracy in predicting houses built before 1980. _

```{python}
# Include and execute your code here
# Create a dataframe for feature importance
feature_importance = pd.DataFrame({
    'Feature': data.columns[:len(clf.feature_importances_)],  # Adjusting to match lengths
    'Importance': clf.feature_importances_
}).sort_values(by='Importance', ascending=True)

# Setup LetsPlot for HTML output
LetsPlot.setup_html(isolated_frame=True)

# Create a bar chart
chart = (ggplot(feature_importance)  
         + geom_bar(aes(x='Feature', y='Importance'), stat='identity', fill='blue')
         + coord_flip()
         + ggtitle('Feature Importance')
         + xlab('Features')
         + ylab('Importance')
         
)
chart.show()


```


## QUESTION|TASK 4

__Describe the quality of your classification model using 2-3 different evaluation metrics.__ You also need to explain how to interpret each of the evaluation metrics you use.  

_  The Accuracy Metric measures correct cases both negative and positive while the precision metric measure positive instances measuring of all the positive which ones were all correct.  _

```{python}
# Include and execute your code here
#accuracy score
from sklearn.metrics import accuracy_score
y_pred = clf.predict(X_test)  # Predictions on the test set
y_true = y_test  # True labels for the test set

print(f'Accuracy Score: {accuracy_score(y_true, y_pred)}')




#precision score
import numpy as np
from sklearn.metrics import precision_score
y_true = clf.predict(X_test)  # Predictions on the test set
y_true = y_test  # True labels for the test set

precision_score(y_true, y_pred, average='macro')
precision_score(y_true, y_pred, average='micro')
precision_score(y_true, y_pred, average='weighted')
precision_score(y_true, y_pred, average=None)
y_pred = clf.predict(X_test)
precision_score(y_true, y_pred, average=None)
print(f'Precision Score: {precision_score(y_true, y_pred, pos_label=1)}')
precision_score(y_true, y_pred, average=None, zero_division=np.nan)







```

---

## STRETCH QUESTION|TASK 1

__Repeat the classification model using 3 different algorithms.__ Display their Feature Importance, and Decision Matrix. Explain the differences between the models and which one you would recommend to the Client.   

_type your results and analysis here_

```{python}


```


## STRETCH QUESTION|TASK 2

__Join the `dwellings_neighborhoods_ml.csv` data to the `dwelling_ml.csv` on the `parcel` column to create a new dataset. Duplicate the code for the stretch question above and update it to use this data.__ Explain the differences and if this changes the model you recomend to the Client.   

_type your results and analysis here_

```{python}
# Include and execute your code here
import pandas as pd
import numpy as np
from lets_plot import *
LetsPlot.setup_html(isolated_frame=True)
from sklearn.model_selection import train_test_split
from sklearn import metrics
df = pd.read_csv("https://github.com/byuidatascience/data4dwellings/raw/master/data-raw/dwellings_ml/dwellings_ml.csv")


first_10_values = y_test[:10]

#average
average_first_10 = first_10_values.mean()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.32, random_state=76) # 80% training and 30% test 

clf = DecisionTreeClassifier()

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

print("The average of the first 10 testing y values is:", average_first_10)
average_sprice = X_train['sprice'][:10].mean()
print('Bacon', average_sprice)

```

  
## STRETCH QUESTION|TASK 3

__Can you build a model that predicts the year a house was built?__ Explain the model and the evaluation metrics you would use to determine if the model is good.  

_type your results and analysis here_

```{python}
# Include and execute your code here

# %%
# Include and execute your code here

import pandas as pd
from sklearn.model_selection import train_test_split

# Load data
df = pd.read_csv("https://github.com/byuidatascience/data4dwellings/raw/master/data-raw/dwellings_ml/dwellings_ml.csv")

# Define features (X) and target (y)
X = df.drop(columns=['sprice'])  # Remove 'sprice' from features
y = df['sprice']  # Target variable

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.34, random_state=76)

# Calculate the average of the first 10 values in training set's target variable
average_sprice = y_train[:10].mean()
print("Sprice Average:", average_sprice)
```

---
